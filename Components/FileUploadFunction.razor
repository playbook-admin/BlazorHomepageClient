@page "/file-upload"
@inject IJSRuntime JsRuntime
@inject IHttpClientFactory HttpClientFactory
@inject IGlobalStateContext GlobalStateContext
@using System.Net.Http.Headers

<div id="DropZone" class="@GetDropZoneClass()">
    <label for="UploadButton">
        @if (ImagePreview != string.Empty)
        {
            <img src="@ImagePreview" alt="Preview" />
        }
        else
        {
            <strong class="text-center">Drag the file here...</strong>
            <br />
            <strong class="text-center">or use file picker!</strong>
        }
    </label>
    <input type="file" id="UploadButton" style="display: none;" @onchange="TriggerFileInput" />

    @if (ImagePreview != string.Empty)
    {
        <div>
            <br />
            <button @onclick="HandleCancel">
                <FontAwesomeIcon Icon="times" Size="2x" />
            </button>
            @if (!string.IsNullOrEmpty(Caption))
            {
                <button @onclick="HandleUpload">
                    <FontAwesomeIcon Icon="save" Size="2x" />
                </button>
                <FontAwesomeIcon Icon="spinner"
                                 Size="2x"
                                 Spin="true"
                                 Style=""
                                 Opacity="@(Loading ? "1" : "0")" />
            }
        </div>
    }
</div>

@code {
    [Parameter] public int AlbumId { get; set; }
    [Parameter] public string Caption { get; set; } = string.Empty;
    [Parameter] public Func<string, Task> OnPhotoAdded { get; set; }

    private bool Loading => GlobalStateContext.State.Loading;
    private string ImagePreview { get; set; } = string.Empty;
    private string ImageRawBase64 { get; set; } = string.Empty;
    private string FileName { get; set; } = string.Empty;
    private string FileType { get; set; } = string.Empty;
    private long FileSize { get; set; } = 0;
    private DropState CurrentDropState { get; set; } = new DropState();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetRef = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("setupDragAndDrop", dotNetRef, "DropZone");
        }
    }

    private async Task TriggerFileInput()
    {
        var dotNetRef = DotNetObjectReference.Create(this);
        await JsRuntime.InvokeVoidAsync("handleFileInputChange", dotNetRef, "UploadButton");
    }

    [JSInvokable]
    public void ReceiveFileData(FileData fileData)
    {
        ImagePreview = $"data:{fileData.Type};base64,{fileData.Content}";
        ImageRawBase64 = fileData.Content;
        FileName = fileData.Name;
        FileType = fileData.Type;
        FileSize = fileData.Size;
        StateHasChanged();
    }


    private string GetDropZoneClass()
    {
        return CurrentDropState.InDropZone ? "drag-drop-zone inside-drag-area" : "drag-drop-zone";
    }

    private async Task HandleUpload()
    {
        GlobalStateContext.SetLoading(true);
        var formData = new MultipartFormDataContent();
        var fileContent = new ByteArrayContent(Convert.FromBase64String(ImageRawBase64));
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(FileType);
        formData.Add(fileContent, "Image", FileName);
        formData.Add(new StringContent(AlbumId.ToString()), "AlbumId");
        formData.Add(new StringContent(Caption), "Caption");

        try
        {
            var httpClient = HttpClientFactory.CreateClient("MyHttpClient");
            var response = await httpClient.PostAsync("api/photos/add/", formData);
            response.EnsureSuccessStatusCode();
            var responseBody = await response.Content.ReadAsStringAsync();
            await OnPhotoAdded(responseBody);
            ResetFields();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error connecting to server: {ex.Message}");
            GlobalStateContext.SetLoading(false);
        }
    }

    private void HandleCancel()
    {
        ResetFields();
    }

    private void ResetFields()
    {
        ImagePreview = string.Empty;
        ImageRawBase64 = string.Empty;
        FileName = string.Empty;
        FileType = string.Empty;
        FileSize = 0;
        StateHasChanged();
        GlobalStateContext.SetLoading(false);
    }

    private void HandleDragEnter()
    {
        CurrentDropState.DropDepth++;
        StateHasChanged();
    }

    private void HandleDragLeave()
    {
        CurrentDropState.DropDepth--;
        if (CurrentDropState.DropDepth == 0)
        {
            CurrentDropState.InDropZone = false;
        }
        StateHasChanged();
    }

    private void HandleDragOver()
    {
        CurrentDropState.InDropZone = true;
        StateHasChanged();
    }


    [JSInvokable]
    public void ProcessDroppedFiles(List<FileData> files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            ImagePreview = $"data:{file.Type};base64,{file.Content}";
            ImageRawBase64 = file.Content;
            FileName = file.Name;
            FileType = file.Type;
            FileSize = file.Size;
            StateHasChanged();
        }
    }


    public class FileData
    {
        public string Name { get; set; } = string.Empty;
        public long Size { get; set; }
        public string Type { get; set; } = string.Empty;
        public string Content { get; set; } = string.Empty; // Base64 encoded file content
    }

    private class DropState
    {
        public int DropDepth { get; set; } = 0;
        public bool InDropZone { get; set; } = false;
        public List<IBrowserFile> FileList { get; set; } = new List<IBrowserFile>();
    }
}

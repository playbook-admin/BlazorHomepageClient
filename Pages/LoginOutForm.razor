@page "/loginoutform"
@using BlazorClient.Shared
@inject IGlobalStateContext GlobalStateContext
@inject ISessionUserContext SessionUserContext
@inject NavigationManager Navigation

<!-- Modal -->
<Modal ShowModal="@isModalVisible" ShowModalChanged="@((value) => isModalVisible = value)">
    <Header>
        <div class="modal-header">
            <div class="modal-title h4">
                        @if (!isAuthorized)
                        {
                            <FormInput Text="@password"
                                       Type="password"
                                       Placeholder="Password"
                                       PreText="@captionText"
                                       OnTextChanged="value => password = value"
                                       OnEnter="HandleLogInOut" />
                        }
                        else
                        {
                            <strong>Do you want to log out?</strong>
                        }
            </div>
        </div>
    </Header>
    <Body>
        <div class="modal-body">
            <button class="btn btn-secondary" @onclick="HideModal">Cancel</button>
            <button class="btn btn-primary" @onclick="HandleLogInOut">
                @(isAuthorized ? "Log out" : "Log in")
            </button>
            <FontAwesomeIcon 
                Icon="spinner" 
                Size="2x" 
                Spin="true" 
                Style=""
                Opacity="@opacity" />
        </div>
    </Body>
</Modal>

@code {
    private bool isModalVisible = false;
    private bool isAuthorized => SessionUserContext.State.IsAuthorized;
    private bool loading => GlobalStateContext.State.Loading;
    private string opacity => loading ? "1" : "0";
    private string password = string.Empty;
    private string captionText = "Log in";

    protected override void OnInitialized()
    {
        isModalVisible = true; // Show the modal when the component initializes
    }


    private void ShowModal()
    {
        isModalVisible = true;
    }

    private void HideModal()
    {
        isModalVisible = false;
        Navigation.NavigateTo("/albums");
    }

    private async Task HandleLogInOut()
    {
        if (isAuthorized)
        {
            await SessionUserContext.LogoutAsync();
            HideModal();
        }
        else
        {
            var response = await SessionUserContext.CheckPasswordAsync(password);
            if (response == "PasswordOk")
            {
                HideModal();
            }
            else
            {
                captionText = "Wrong password, try again...";
            }
        }
    }
}

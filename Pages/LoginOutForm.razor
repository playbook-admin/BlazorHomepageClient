@page "/loginoutform"
@inject IGlobalStateContext GlobalStateContext
@inject ISessionUserContext SessionUserContext
@inject NavigationManager Navigation

<!-- Modal -->
<Modal IsVisible="@isModalVisible" IsVisibleChanged="@((value) => isModalVisible = value)">
    <Header>
        <h5>@(isAuthorized ? "Log out" : "Log in")</h5>
    </Header>
    <Body>
        @if (!isAuthorized)
        {
            <FormInput Text="@password"
                       Type="password"
                       Placeholder="Password"
                       PreText="@captionText"
                       OnTextChanged="HandlePasswordChanged"
                       OnEnter="HandleLogInOut" />
        }
        else
        {
            <strong>Do you want to log out?</strong>
        }
    </Body>
    <Footer>
        <button class="btn btn-secondary" @onclick="HideModal">Cancel</button>
        <button class="btn btn-primary" @onclick="HandleLogInOut">
            @(isAuthorized ? "Log out" : "Log in")
        </button>
    </Footer>
</Modal>

@code {
    private bool isModalVisible = false;
    private bool isAuthorized = false; // Fetch this from a service or state
    private string password = string.Empty;
    private string captionText = "Log in";

    protected override void OnInitialized()
    {
        isModalVisible = true; // Show the modal when the component initializes
    }

    private void ShowModal()
    {
        isModalVisible = true;
    }

    private void HideModal()
    {
        isModalVisible = false;
    }

    private void HandlePasswordChanged(string value)
    {
        password = value;
    }

    private async Task HandleLogInOut()
    {
        if (isAuthorized)
        {
            // Handle logout
            isAuthorized = false;
            HideModal();
        }
        else
        {
            // Handle login
            bool loginSuccessful = await CheckPasswordAsync(password);
            if (loginSuccessful)
            {
                isAuthorized = true;
                HideModal();
            }
            else
            {
                captionText = "Wrong password, try again...";
            }
        }
    }

    private Task<bool> CheckPasswordAsync(string password)
    {
        // Replace this with your password checking logic
        return Task.FromResult(password == "expectedPassword");
    }
}
